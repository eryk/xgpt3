// Code generated by ent, DO NOT EDIT.

package chatent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fanchunke/xgpt3/conversation/ent/chatent/message"
	"github.com/fanchunke/xgpt3/conversation/ent/chatent/predicate"
	"github.com/fanchunke/xgpt3/conversation/ent/chatent/session"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks     []Hook
	mutation  *MessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetSessionID sets the "session_id" field.
func (mu *MessageUpdate) SetSessionID(i int) *MessageUpdate {
	mu.mutation.SetSessionID(i)
	return mu
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSessionID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetSessionID(*i)
	}
	return mu
}

// ClearSessionID clears the value of the "session_id" field.
func (mu *MessageUpdate) ClearSessionID() *MessageUpdate {
	mu.mutation.ClearSessionID()
	return mu
}

// SetFromUserID sets the "from_user_id" field.
func (mu *MessageUpdate) SetFromUserID(s string) *MessageUpdate {
	mu.mutation.SetFromUserID(s)
	return mu
}

// SetToUserID sets the "to_user_id" field.
func (mu *MessageUpdate) SetToUserID(s string) *MessageUpdate {
	mu.mutation.SetToUserID(s)
	return mu
}

// SetContent sets the "content" field.
func (mu *MessageUpdate) SetContent(s string) *MessageUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetSpouseID sets the "spouse_id" field.
func (mu *MessageUpdate) SetSpouseID(i int) *MessageUpdate {
	mu.mutation.SetSpouseID(i)
	return mu
}

// SetNillableSpouseID sets the "spouse_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSpouseID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetSpouseID(*i)
	}
	return mu
}

// ClearSpouseID clears the value of the "spouse_id" field.
func (mu *MessageUpdate) ClearSpouseID() *MessageUpdate {
	mu.mutation.ClearSpouseID()
	return mu
}

// SetSpouse sets the "spouse" edge to the Message entity.
func (mu *MessageUpdate) SetSpouse(m *Message) *MessageUpdate {
	return mu.SetSpouseID(m.ID)
}

// SetSession sets the "session" edge to the Session entity.
func (mu *MessageUpdate) SetSession(s *Session) *MessageUpdate {
	return mu.SetSessionID(s.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// ClearSpouse clears the "spouse" edge to the Message entity.
func (mu *MessageUpdate) ClearSpouse() *MessageUpdate {
	mu.mutation.ClearSpouse()
	return mu
}

// ClearSession clears the "session" edge to the Session entity.
func (mu *MessageUpdate) ClearSession() *MessageUpdate {
	mu.mutation.ClearSession()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MessageMutation](ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MessageUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: message.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.FromUserID(); ok {
		_spec.SetField(message.FieldFromUserID, field.TypeString, value)
	}
	if value, ok := mu.mutation.ToUserID(); ok {
		_spec.SetField(message.FieldToUserID, field.TypeString, value)
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if mu.mutation.SpouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   message.SpouseTable,
			Columns: []string{message.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   message.SpouseTable,
			Columns: []string{message.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SessionTable,
			Columns: []string{message.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SessionTable,
			Columns: []string{message.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSessionID sets the "session_id" field.
func (muo *MessageUpdateOne) SetSessionID(i int) *MessageUpdateOne {
	muo.mutation.SetSessionID(i)
	return muo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSessionID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetSessionID(*i)
	}
	return muo
}

// ClearSessionID clears the value of the "session_id" field.
func (muo *MessageUpdateOne) ClearSessionID() *MessageUpdateOne {
	muo.mutation.ClearSessionID()
	return muo
}

// SetFromUserID sets the "from_user_id" field.
func (muo *MessageUpdateOne) SetFromUserID(s string) *MessageUpdateOne {
	muo.mutation.SetFromUserID(s)
	return muo
}

// SetToUserID sets the "to_user_id" field.
func (muo *MessageUpdateOne) SetToUserID(s string) *MessageUpdateOne {
	muo.mutation.SetToUserID(s)
	return muo
}

// SetContent sets the "content" field.
func (muo *MessageUpdateOne) SetContent(s string) *MessageUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetSpouseID sets the "spouse_id" field.
func (muo *MessageUpdateOne) SetSpouseID(i int) *MessageUpdateOne {
	muo.mutation.SetSpouseID(i)
	return muo
}

// SetNillableSpouseID sets the "spouse_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSpouseID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetSpouseID(*i)
	}
	return muo
}

// ClearSpouseID clears the value of the "spouse_id" field.
func (muo *MessageUpdateOne) ClearSpouseID() *MessageUpdateOne {
	muo.mutation.ClearSpouseID()
	return muo
}

// SetSpouse sets the "spouse" edge to the Message entity.
func (muo *MessageUpdateOne) SetSpouse(m *Message) *MessageUpdateOne {
	return muo.SetSpouseID(m.ID)
}

// SetSession sets the "session" edge to the Session entity.
func (muo *MessageUpdateOne) SetSession(s *Session) *MessageUpdateOne {
	return muo.SetSessionID(s.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// ClearSpouse clears the "spouse" edge to the Message entity.
func (muo *MessageUpdateOne) ClearSpouse() *MessageUpdateOne {
	muo.mutation.ClearSpouse()
	return muo
}

// ClearSession clears the "session" edge to the Session entity.
func (muo *MessageUpdateOne) ClearSession() *MessageUpdateOne {
	muo.mutation.ClearSession()
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	return withHooks[*Message, MessageMutation](ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MessageUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: message.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`chatent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("chatent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.FromUserID(); ok {
		_spec.SetField(message.FieldFromUserID, field.TypeString, value)
	}
	if value, ok := muo.mutation.ToUserID(); ok {
		_spec.SetField(message.FieldToUserID, field.TypeString, value)
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if muo.mutation.SpouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   message.SpouseTable,
			Columns: []string{message.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   message.SpouseTable,
			Columns: []string{message.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SessionTable,
			Columns: []string{message.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SessionTable,
			Columns: []string{message.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
