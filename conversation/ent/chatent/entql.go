// Code generated by ent, DO NOT EDIT.

package chatent

import (
	"github.com/fanchunke/xgpt3/conversation/ent/chatent/message"
	"github.com/fanchunke/xgpt3/conversation/ent/chatent/predicate"
	"github.com/fanchunke/xgpt3/conversation/ent/chatent/session"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: message.FieldID,
			},
		},
		Type: "Message",
		Fields: map[string]*sqlgraph.FieldSpec{
			message.FieldSessionID:  {Type: field.TypeInt, Column: message.FieldSessionID},
			message.FieldFromUserID: {Type: field.TypeString, Column: message.FieldFromUserID},
			message.FieldToUserID:   {Type: field.TypeString, Column: message.FieldToUserID},
			message.FieldContent:    {Type: field.TypeString, Column: message.FieldContent},
			message.FieldSpouseID:   {Type: field.TypeInt, Column: message.FieldSpouseID},
			message.FieldCreatedAt:  {Type: field.TypeTime, Column: message.FieldCreatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   session.Table,
			Columns: session.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: session.FieldID,
			},
		},
		Type: "Session",
		Fields: map[string]*sqlgraph.FieldSpec{
			session.FieldUserID:    {Type: field.TypeString, Column: session.FieldUserID},
			session.FieldStatus:    {Type: field.TypeBool, Column: session.FieldStatus},
			session.FieldCreatedAt: {Type: field.TypeTime, Column: session.FieldCreatedAt},
			session.FieldUpdatedAt: {Type: field.TypeTime, Column: session.FieldUpdatedAt},
			session.FieldDeletedAt: {Type: field.TypeInt, Column: session.FieldDeletedAt},
		},
	}
	graph.MustAddE(
		"spouse",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   message.SpouseTable,
			Columns: []string{message.SpouseColumn},
			Bidi:    true,
		},
		"Message",
		"Message",
	)
	graph.MustAddE(
		"session",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SessionTable,
			Columns: []string{message.SessionColumn},
			Bidi:    false,
		},
		"Message",
		"Session",
	)
	graph.MustAddE(
		"messages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   session.MessagesTable,
			Columns: []string{session.MessagesColumn},
			Bidi:    false,
		},
		"Session",
		"Message",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (mq *MessageQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MessageQuery builder.
func (mq *MessageQuery) Filter() *MessageFilter {
	return &MessageFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MessageMutation builder.
func (m *MessageMutation) Filter() *MessageFilter {
	return &MessageFilter{config: m.config, predicateAdder: m}
}

// MessageFilter provides a generic filtering capability at runtime for MessageQuery.
type MessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *MessageFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(message.FieldID))
}

// WhereSessionID applies the entql int predicate on the session_id field.
func (f *MessageFilter) WhereSessionID(p entql.IntP) {
	f.Where(p.Field(message.FieldSessionID))
}

// WhereFromUserID applies the entql string predicate on the from_user_id field.
func (f *MessageFilter) WhereFromUserID(p entql.StringP) {
	f.Where(p.Field(message.FieldFromUserID))
}

// WhereToUserID applies the entql string predicate on the to_user_id field.
func (f *MessageFilter) WhereToUserID(p entql.StringP) {
	f.Where(p.Field(message.FieldToUserID))
}

// WhereContent applies the entql string predicate on the content field.
func (f *MessageFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(message.FieldContent))
}

// WhereSpouseID applies the entql int predicate on the spouse_id field.
func (f *MessageFilter) WhereSpouseID(p entql.IntP) {
	f.Where(p.Field(message.FieldSpouseID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MessageFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(message.FieldCreatedAt))
}

// WhereHasSpouse applies a predicate to check if query has an edge spouse.
func (f *MessageFilter) WhereHasSpouse() {
	f.Where(entql.HasEdge("spouse"))
}

// WhereHasSpouseWith applies a predicate to check if query has an edge spouse with a given conditions (other predicates).
func (f *MessageFilter) WhereHasSpouseWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("spouse", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSession applies a predicate to check if query has an edge session.
func (f *MessageFilter) WhereHasSession() {
	f.Where(entql.HasEdge("session"))
}

// WhereHasSessionWith applies a predicate to check if query has an edge session with a given conditions (other predicates).
func (f *MessageFilter) WhereHasSessionWith(preds ...predicate.Session) {
	f.Where(entql.HasEdgeWith("session", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SessionQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SessionQuery builder.
func (sq *SessionQuery) Filter() *SessionFilter {
	return &SessionFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SessionMutation builder.
func (m *SessionMutation) Filter() *SessionFilter {
	return &SessionFilter{config: m.config, predicateAdder: m}
}

// SessionFilter provides a generic filtering capability at runtime for SessionQuery.
type SessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SessionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(session.FieldID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *SessionFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(session.FieldUserID))
}

// WhereStatus applies the entql bool predicate on the status field.
func (f *SessionFilter) WhereStatus(p entql.BoolP) {
	f.Where(p.Field(session.FieldStatus))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SessionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SessionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql int predicate on the deleted_at field.
func (f *SessionFilter) WhereDeletedAt(p entql.IntP) {
	f.Where(p.Field(session.FieldDeletedAt))
}

// WhereHasMessages applies a predicate to check if query has an edge messages.
func (f *SessionFilter) WhereHasMessages() {
	f.Where(entql.HasEdge("messages"))
}

// WhereHasMessagesWith applies a predicate to check if query has an edge messages with a given conditions (other predicates).
func (f *SessionFilter) WhereHasMessagesWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("messages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
